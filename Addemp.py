import os
import sqlite3
import sys
import Admin
from PIL import Image
defaultImg="Data/eMP dEFAUILT.png"
from PyQt5.QtCore import QSize,Qt
from PyQt5.QtGui import QImage, QPalette, QBrush, QPixmap, QIcon
from PyQt5.QtWidgets import *
con = sqlite3.connect('empolyee.db')
cur = con.cursor()
class Addemp(QWidget):
    def __init__(self):
        super().__init__()
        self.setGeometry(100, 100, 1500,800)
        self.setWindowTitle("Add Employee")
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.setStyleSheet("QWidget{background:#fef2da;font-size:12pt;}QLineEdit{background:#fffbf4;border-radius:10px}QComboBox{background:white;border-radius:10px}QTableWidget{background:white;border-radius:10px}QListWidget{background:white;border-radius:10px}")
        self.mainhbox=QHBoxLayout()
        self.leftvbox=QVBoxLayout()
        self.hbox1=QHBoxLayout()
        self.hbox2=QHBoxLayout()
        self.hbox3=QHBoxLayout()
        self.hbox4=QHBoxLayout()
        self.hbox5=QHBoxLayout()
        self.hbox6=QHBoxLayout()
        self.rightvbox=QVBoxLayout()
        self.bottomhbox=QHBoxLayout()
        self.backbtn=QToolButton()
        self.backbtn.setIcon(QIcon("Data/Back@2x.png"))
        self.backbtn.setIconSize(QSize(80,40))
        self.backbtn.resize(QSize(80,40))
        self.backbtn.setStyleSheet("background-color:transparent ; border-style:outset")
        self.backbtn.clicked.connect(self.back)
        self.emplistlbl=QLabel("Employee List:")
        self.emplist=QListWidget()
        self.emplist.setMinimumWidth(400)
        self.emplist.setMinimumHeight(600)
        self.emplist.itemClicked.connect(self.singleclick)
        self.addbtn=QToolButton()
        self.addbtn.setIcon(QIcon("Data/New@2x.png"))
        self.addbtn.setIconSize(QSize(100,40))
        self.addbtn.resize(QSize(100, 40))
        self.addbtn.setStyleSheet("background-color:transparent ; border-style:outset")
        self.addbtn.clicked.connect(self.addos)
        self.addsbtn = QToolButton()
        self.addsbtn.setIcon(QIcon("Data/add.png"))
        self.addsbtn.setIconSize(QSize(100, 40))
        self.addsbtn.resize(QSize(100, 40))
        self.addsbtn.setStyleSheet("background-color:transparent ; border-style:outset")
        self.addsbtn.clicked.connect(self.add)
        self.deletebtn=QToolButton()
        self.deletebtn.setIcon(QIcon("Data/delete.png"))
        self.deletebtn.setIconSize(QSize(100, 40))
        self.deletebtn.resize(QSize(100, 40))
        self.deletebtn.setStyleSheet("background-color:transparent ; border-style:outset")
        self.deletebtn.clicked.connect(self.deleteEmployee)
        self.editsbtn = QToolButton()
        self.editsbtn.setIcon(QIcon("Data/Edit@2x.png"))
        self.editsbtn.setIconSize(QSize(100, 40))
        self.editsbtn.resize(QSize(100,40))
        self.editsbtn.setStyleSheet("background-color:transparent ; border-style:outset")
        self.editsbtn.clicked.connect(self.edits)
        self.photo = QLabel(self)
        self.photo.resize(QSize(300, 300))
        self.photo.setPixmap(QPixmap("Data/eMP dEFAUILT.png").scaled(300, 300))
        self.hbox=QHBoxLayout()
        self.hbox.addWidget(self.photo)
        self.hbox.setAlignment(Qt.AlignCenter)
        self.empid=QLabel("Employee ID:")
        self.emptxt=QLineEdit()
        self.name=QLabel("Name:")
        self.nametxt=QLineEdit()
        self.team=QLabel("Team:")
        self.teamtxt=QLineEdit()
        self.desig=QLabel("Designation:")
        self.desigtxt=QLineEdit()
        self.depar=QLabel("Department:")
        self.departxt=QLineEdit()
        self.phone=QLabel("Phone No. :")
        self.phonetxt=QLineEdit()
        self.browsebtn=QToolButton()
        self.browsebtn.setIcon(QIcon("Data/upload.png"))
        self.browsebtn.setIconSize(QSize(100, 40))
        self.browsebtn.resize(QSize(100, 40))
        self.browsebtn.setStyleSheet("background-color:transparent ; border-style:outset")
        self.browsebtn.clicked.connect(self.uploadImage)
        self.type=QLabel("Type(Admin=1,Others=2):")
        self.typetxt=QLineEdit()
        self.password=QLabel("Password:")
        self.passwordtxt=QLineEdit()
        self.hbox7=QHBoxLayout()
        self.hbox8=QHBoxLayout()
        self.hbox9=QHBoxLayout()
        self.hbox10=QHBoxLayout()
        self.hbox9.addWidget(self.password)
        self.hbox9.addWidget(self.passwordtxt)
        self.hbox10.addWidget(self.type)
        self.hbox10.addWidget(self.typetxt)
        self.updatebtn=QPushButton()
        self.updatebtn.clicked.connect(self.updateEmployee)
        self.updatebtn.setIcon(QIcon("Data/update.png"))
        self.updatebtn.setIconSize(QSize(100, 40))
        self.updatebtn.resize(QSize(100, 40))
        self.updatebtn.setStyleSheet("background-color:transparent ; border-style:outset")
        self.updatebtn.setEnabled(False)
        self.hbox8.addWidget(self.updatebtn)
        self.hbox8.addWidget(self.addsbtn)
        self.hbox8.setAlignment(Qt.AlignCenter)
        self.hbox7.addWidget(self.browsebtn)
        self.hbox7.setAlignment(Qt.AlignCenter)
        self.hbox1.addWidget(self.empid)
        self.hbox1.addWidget(self.emptxt)
        self.hbox2.addWidget(self.name)
        self.hbox2.addWidget(self.nametxt)
        self.hbox3.addWidget(self.team)
        self.hbox3.addWidget(self.teamtxt)
        self.hbox4.addWidget(self.desig)
        self.hbox4.addWidget(self.desigtxt)
        self.hbox5.addWidget(self.depar)
        self.hbox5.addWidget(self.departxt)
        self.hbox6.addWidget(self.phone)
        self.hbox6.addWidget(self.phonetxt)
        self.rightvbox.addStretch()
        self.rightvbox.addLayout(self.hbox)
        self.rightvbox.addLayout(self.hbox7)
        self.rightvbox.addLayout(self.hbox1)
        self.rightvbox.addLayout(self.hbox2)
        self.rightvbox.addLayout(self.hbox3)
        self.rightvbox.addLayout(self.hbox4)
        self.rightvbox.addLayout(self.hbox5)
        self.rightvbox.addLayout(self.hbox6)
        self.rightvbox.addLayout(self.hbox9)
        self.rightvbox.addLayout(self.hbox10)
        self.rightvbox.addLayout(self.hbox8)
        self.rightvbox.addStretch()
        self.rightvbox.setSpacing(40)
        self.bottomhbox.addWidget(self.addbtn)
        self.bottomhbox.addWidget(self.editsbtn)
        self.bottomhbox.addWidget(self.deletebtn)
        self.leftvbox.addWidget(self.backbtn,5)
        self.leftvbox.addWidget(self.emplistlbl,5)
        self.leftvbox.addWidget(self.emplist,90)
        self.leftvbox.addLayout(self.bottomhbox)
        self.mainhbox.addLayout(self.leftvbox)
        self.mainhbox.addLayout(self.rightvbox)
        self.setLayout(self.mainhbox)
        self.getEquipment()
        self.addsbtn.setEnabled(False)
        self.nametxt.setEnabled(False)
        self.emptxt.setEnabled(False)
        self.desigtxt.setEnabled(False)
        self.departxt.setEnabled(False)
        self.phonetxt.setEnabled(False)
        self.teamtxt.setEnabled(False)
        self.passwordtxt.setEnabled(False)
        self.typetxt.setEnabled(False)
        self.showMaximized()
    def addos(self):
        self.nametxt.setText("")
        self.emptxt.setText("")
        self.desigtxt.setText("")
        self.departxt.setText("")
        self.phonetxt.setText("")
        self.teamtxt.setText("")
        self.passwordtxt.setText("")
        self.typetxt.setText("")
        self.addsbtn.setEnabled(True)
        self.nametxt.setEnabled(True)
        self.emptxt.setEnabled(True)
        self.desigtxt.setEnabled(True)
        self.departxt.setEnabled(True)
        self.phonetxt.setEnabled(True)
        self.teamtxt.setEnabled(True)
        self.passwordtxt.setEnabled(True)
        self.typetxt.setEnabled(True)
        self.updatebtn.setEnabled(False)
    def edits(self):
        self.addsbtn.setEnabled(False)
        self.nametxt.setEnabled(True)
        self.emptxt.setEnabled(True)
        self.desigtxt.setEnabled(True)
        self.departxt.setEnabled(True)
        self.phonetxt.setEnabled(True)
        self.teamtxt.setEnabled(True)
        self.passwordtxt.setEnabled(True)
        self.typetxt.setEnabled(True)
        self.updatebtn.setEnabled(True)
    def add(self):
        global defaultImg
        name=self.nametxt.text()
        empid=self.emptxt.text()
        desig=self.desigtxt.text()
        depar=self.departxt.text()
        phone=self.phonetxt.text()
        team=self.teamtxt.text()
        password=self.passwordtxt.text()
        type=self.typetxt.text()
        if name=="" or empid=="" or team=="" :
            mbox = QMessageBox.information(self, "Information", "Please Do Not Leave Any Fields Empty")
        else:
            query = "INSERT INTO employee (Empid,Name,Designation,Department,Team,Phone,Photo,Password,Type) VALUES(?,?,?,?,?,?,?,?,?)"
            cur.execute(query, (empid,name,desig,depar,team,phone,defaultImg,password,type))
            con.commit()
            QMessageBox.information(self, "Success", "Employee Added")
            self.nametxt.setText("")
            self.emptxt.setText("")
            self.desigtxt.setText("")
            self.departxt.setText("")
            self.phonetxt.setText("")
            self.teamtxt.setText("")
            self.passwordtxt.setText("")
            self.typetxt.setText("")
            self.emplist.clear()
            self.getEquipment()
    def updateEmployee(self):
        global defaultImg
        employee = self.emplist.currentItem().text()
        id = self.getid(employee)
        name = self.nametxt.text()
        empid = self.emptxt.text()
        desig = self.desigtxt.text()
        depar = self.departxt.text()
        phone = self.phonetxt.text()
        team = self.teamtxt.text()
        password = self.passwordtxt.text()
        type = self.typetxt.text()
        try:
            query = "UPDATE employee set Empid =?, Name=?,Designation=?,Department=?,Phone=?,Team=?,Photo=?,Password=?,Type=? WHERE id=?"
            cur.execute(query,(empid,name,desig,depar,phone,team,defaultImg,password,type,id))
            con.commit()
            QMessageBox.information(self, "Success", "Person has been updated")
        except:
            QMessageBox.information(self, "Warning", "Person has not been updated")
        self.emplist.clear()
        self.getEquipment()
    def back(self):
        self.admin=Admin.admin()
        self.close()
    def deleteEmployee(self):
        if self.emplist.selectedItems():
            person = self.emplist.currentItem().text()
            id = self.getid(person)
            mbox = QMessageBox.question(self, "Warning", "Are you sure to delete this Employee?",
                                        QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if mbox == QMessageBox.Yes:
                try:
                    query = "DELETE FROM employee WHERE id=?"
                    cur.execute(query, (id,))
                    con.commit()
                    QMessageBox.information(self, "Info!!!", "Employee has been deleted")
                except:
                    QMessageBox.information(self, "Warning!!!", "Person has not been deleted")
            self.emplist.clear()
            self.nametxt.setText("")
            self.emptxt.setText("")
            self.desigtxt.setText("")
            self.departxt.setText("")
            self.phonetxt.setText("")
            self.teamtxt.setText("")
            self.passwordtxt.setText("")
            self.typetxt.setText("")
            self.getEquipment()
        else:
            QMessageBox.information(self, "Warning!!!", "Please select a person to delete")

    def getEquipment(self):
        query = "SELECT Name FROM employee"
        employees = cur.execute(query).fetchall()
        for employee in employees:
            self.emplist.addItem(employee[0])
    def singleclick(self):
        global defaultImg
        self.addsbtn.setEnabled(False)
        self.nametxt.setEnabled(False)
        self.emptxt.setEnabled(False)
        self.desigtxt.setEnabled(False)
        self.departxt.setEnabled(False)
        self.phonetxt.setEnabled(False)
        self.teamtxt.setEnabled(False)
        self.passwordtxt.setEnabled(False)
        self.typetxt.setEnabled(False)
        self.updatebtn.setEnabled(False)
        person = self.emplist.currentItem().text()
        id = self.getid(person)
        query = ("SELECT * FROM employee WHERE id=?")
        person = cur.execute(query, (id,)).fetchone()  # single item tuple=(1,)
        print(person)
        defaultImg=person[6]
        self.emptxt.setText(person[0])
        self.nametxt.setText(person[1])
        self.teamtxt.setText(person[2])
        self.desigtxt.setText(person[3])
        self.departxt.setText(person[4])
        self.phonetxt.setText(str(person[5]))
        self.photo.setPixmap(QPixmap(person[6]).scaled(300, 300))
        self.passwordtxt.setText(person[7])
        self.typetxt.setText(str(person[8]))
    def getid(self,person):
        query = "SELECT id,name FROM employee"
        employees = cur.execute(query).fetchall()
        for employee in employees:
            if person==employee[1]:
                return employee[0]
    def uploadImage(self):
        global defaultImg
        size = (300,300)
        self.fileName, ok = QFileDialog.getOpenFileName(self, 'Upload Image', '', 'Image Files (*.jpg *.png)')

        if ok:
            defaultImg = os.path.basename(self.fileName)
            img = Image.open(self.fileName)
            img = img.resize(size)
            print(defaultImg)
            img.save("Data/{}".format(defaultImg))
            self.photo.setPixmap(QPixmap("Data/{}".format(defaultImg)).scaled(300, 300))
            defaultImg="Data/{}".format(defaultImg)

